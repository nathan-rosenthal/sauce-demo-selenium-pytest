{"name": "Login as a Standard User", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=121.0.6167.184)\nStacktrace:\n0   chromedriver                        0x000000010db26538 chromedriver + 4687160\n1   chromedriver                        0x000000010db1dd83 chromedriver + 4652419\n2   chromedriver                        0x000000010d70edcb chromedriver + 396747\n3   chromedriver                        0x000000010d6f6642 chromedriver + 296514\n4   chromedriver                        0x000000010d6f49fa chromedriver + 289274\n5   chromedriver                        0x000000010d6f4d4a chromedriver + 290122\n6   chromedriver                        0x000000010d71187e chromedriver + 407678\n7   chromedriver                        0x000000010d79d3c5 chromedriver + 979909\n8   chromedriver                        0x000000010d77d902 chromedriver + 850178\n9   chromedriver                        0x000000010d79c7bc chromedriver + 976828\n10  chromedriver                        0x000000010d77d6a3 chromedriver + 849571\n11  chromedriver                        0x000000010d74d17f chromedriver + 651647\n12  chromedriver                        0x000000010d74e15e chromedriver + 655710\n13  chromedriver                        0x000000010dae6980 chromedriver + 4426112\n14  chromedriver                        0x000000010daebc18 chromedriver + 4447256\n15  chromedriver                        0x000000010dacae81 chromedriver + 4312705\n16  chromedriver                        0x000000010daec966 chromedriver + 4450662\n17  chromedriver                        0x000000010dabcc9c chromedriver + 4254876\n18  chromedriver                        0x000000010db0c528 chromedriver + 4580648\n19  chromedriver                        0x000000010db0c6de chromedriver + 4581086\n20  chromedriver                        0x000000010db1d9c3 chromedriver + 4651459\n21  libsystem_pthread.dylib             0x00007ff80d5f7202 _pthread_start + 99\n22  libsystem_pthread.dylib             0x00007ff80d5f2bab thread_start + 15", "trace": "request = <SubRequest 'setup' for <Function test_login_standard_user>>\n\n    @pytest.fixture(scope=\"class\", autouse=True)\n    def setup(request):\n        global driver\n        options = Options()\n        options.add_experimental_option(\"detach\", True)\n        driver = webdriver.Chrome(options)\n        request.cls.driver = driver\n        driver.maximize_window()\n>       driver.get('')\n\nconftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1109fc860>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...7ff80d5f7202 _pthread_start + 99\\\\n22  libsystem_pthread.dylib             0x00007ff80d5f2bab thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=121.0.6167.184)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010db26538 chromedriver + 4687160\nE       1   chromedriver                        0x000000010db1dd83 chromedriver + 4652419\nE       2   chromedriver                        0x000000010d70edcb chromedriver + 396747\nE       3   chromedriver                        0x000000010d6f6642 chromedriver + 296514\nE       4   chromedriver                        0x000000010d6f49fa chromedriver + 289274\nE       5   chromedriver                        0x000000010d6f4d4a chromedriver + 290122\nE       6   chromedriver                        0x000000010d71187e chromedriver + 407678\nE       7   chromedriver                        0x000000010d79d3c5 chromedriver + 979909\nE       8   chromedriver                        0x000000010d77d902 chromedriver + 850178\nE       9   chromedriver                        0x000000010d79c7bc chromedriver + 976828\nE       10  chromedriver                        0x000000010d77d6a3 chromedriver + 849571\nE       11  chromedriver                        0x000000010d74d17f chromedriver + 651647\nE       12  chromedriver                        0x000000010d74e15e chromedriver + 655710\nE       13  chromedriver                        0x000000010dae6980 chromedriver + 4426112\nE       14  chromedriver                        0x000000010daebc18 chromedriver + 4447256\nE       15  chromedriver                        0x000000010dacae81 chromedriver + 4312705\nE       16  chromedriver                        0x000000010daec966 chromedriver + 4450662\nE       17  chromedriver                        0x000000010dabcc9c chromedriver + 4254876\nE       18  chromedriver                        0x000000010db0c528 chromedriver + 4580648\nE       19  chromedriver                        0x000000010db0c6de chromedriver + 4581086\nE       20  chromedriver                        0x000000010db1d9c3 chromedriver + 4651459\nE       21  libsystem_pthread.dylib             0x00007ff80d5f7202 _pthread_start + 99\nE       22  libsystem_pthread.dylib             0x00007ff80d5f2bab thread_start + 15\n\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException"}, "description": "Log in with Standard user credentials and check user is logged in", "attachments": [{"name": "screenshot", "source": "25013dbd-207f-4c11-9c62-df4c74d6703b-attachment.png", "type": "image/png"}], "start": 1708341124625, "stop": 1708341124625, "uuid": "0aad273b-27a8-492a-bb6f-fbfd6197f080", "historyId": "184c5956842e5e4689288b8efc9d4f88", "testCaseId": "184c5956842e5e4689288b8efc9d4f88", "fullName": "login_v2_test.TestLogin#test_login_standard_user", "labels": [{"name": "severity", "value": "blocker"}, {"name": "epic", "value": "Authorization & Authentication"}, {"name": "story", "value": "As a regular user, i should be able to log in to the application"}, {"name": "feature", "value": "Login"}, {"name": "tag", "value": "exclude_login"}, {"name": "suite", "value": "login_v2_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "MACBOOKPRO-5E02"}, {"name": "thread", "value": "90263-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "login_v2_test"}]}